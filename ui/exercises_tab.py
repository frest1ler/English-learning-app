"""
–í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
"""

import tkinter as tk
from tkinter import messagebox, scrolledtext
import random
from config import COLORS, FONTS, EXERCISE_MIN_COUNT, EXERCISE_MAX_COUNT, EXERCISE_DEFAULT_COUNT

class ExercisesTab:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"""
    
    def __init__(self, parent, app):
        self.parent = parent
        self.app = app
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        self.selected_topics = []
        self.mixed_exercises = []
        self.current_exercise_index = 0
        self.current_exercise = None
        self.exercise_results = []
        self.answer_checked = False
        
        self.create_ui()
    
    def create_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–∫–ª–∞–¥–∫–∏"""
        main_container = tk.Frame(self.parent, bg=COLORS['light'])
        main_container.pack(fill='both', expand=True)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –≤—ã–±–æ—Ä–æ–º —Ç–µ–º
        self.create_left_panel(main_container)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏
        self.create_right_panel(main_container)
    
    def create_left_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        left_panel = tk.Frame(parent, bg='white', relief='raised', bd=1)
        left_panel.pack(side='left', fill='y', padx=10, pady=10)
        
        tk.Label(
            left_panel,
            text="üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—ã:",
            font=FONTS['subtitle'],
            bg='white',
            fg=COLORS['dark']
        ).pack(pady=10, padx=10)
        
        # –§—Ä–µ–π–º –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤
        checkbox_frame = tk.Frame(left_panel, bg='white')
        checkbox_frame.pack(padx=10, pady=5)
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —á–µ–∫–±–æ–∫—Å–æ–≤
        self.topic_vars = {}
        
        # –°–æ–∑–¥–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã
        for topic in self.app.exercises_data.keys():
            var = tk.BooleanVar()
            self.topic_vars[topic] = var
            
            cb = tk.Checkbutton(
                checkbox_frame,
                text=f"{topic} ({len(self.app.exercises_data[topic])})",
                variable=var,
                font=FONTS['small'],
                bg='white',
                anchor='w',
                command=self.update_selected_topics
            )
            cb.pack(fill='x', pady=3)
        
        # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö/—Å–±—Ä–æ—Å–∞
        button_frame = tk.Frame(left_panel, bg='white')
        button_frame.pack(pady=10)
        
        tk.Button(
            button_frame,
            text="‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ",
            command=self.select_all_topics,
            font=FONTS['tiny'],
            bg=COLORS['success'],
            fg='white',
            padx=10,
            pady=5
        ).pack(side='left', padx=3)
        
        tk.Button(
            button_frame,
            text="‚ùå –°–Ω—è—Ç—å –≤—Å–µ",
            command=self.deselect_all_topics,
            font=FONTS['tiny'],
            bg=COLORS['danger'],
            fg='white',
            padx=10,
            pady=5
        ).pack(side='left', padx=3)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–º–∞—Ö
        self.selected_info_label = tk.Label(
            left_panel,
            text="–í—ã–±—Ä–∞–Ω–æ —Ç–µ–º: 0\n–í—Å–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: 0",
            font=FONTS['tiny'],
            bg='white',
            fg=COLORS['gray']
        )
        self.selected_info_label.pack(pady=5)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        settings_frame = tk.Frame(left_panel, bg='white')
        settings_frame.pack(pady=10)
        
        tk.Label(
            settings_frame,
            text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:",
            font=FONTS['tiny'],
            bg='white'
        ).pack()
        
        self.exercise_count_var = tk.IntVar(value=EXERCISE_DEFAULT_COUNT)
        self.exercise_count_scale = tk.Scale(
            settings_frame,
            from_=EXERCISE_MIN_COUNT,
            to=EXERCISE_MAX_COUNT,
            orient='horizontal',
            variable=self.exercise_count_var,
            bg='white',
            length=150
        )
        self.exercise_count_scale.pack(pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞–ª–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        tk.Button(
            left_panel,
            text="üöÄ –ù–∞—á–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è",
            command=self.start_mixed_exercises,
            font=FONTS['normal'],
            bg=COLORS['primary'],
            fg='white',
            padx=20,
            pady=10
        ).pack(pady=15)
    
    def create_right_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏"""
        right_panel = tk.Frame(parent, bg=COLORS['light'])
        right_panel.pack(side='right', fill='both', expand=True, padx=10, pady=10)
        
        # –§—Ä–µ–π–º –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        exercise_frame = tk.Frame(right_panel, bg='white', relief='raised', bd=2)
        exercise_frame.pack(fill='both', expand=True)
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ —Ç–µ–∫—É—â–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        self.current_topic_label = tk.Label(
            exercise_frame,
            text="",
            font=FONTS['small'],
            bg='white',
            fg=COLORS['purple']
        )
        self.current_topic_label.pack(pady=5)
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞
        self.rule_title_label = tk.Label(
            exercise_frame,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—ã –∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è'",
            font=FONTS['title'],
            bg='white',
            fg=COLORS['dark']
        )
        self.rule_title_label.pack(pady=15)
        
        # –ó–∞–¥–∞–Ω–∏–µ
        self.exercise_instruction_label = tk.Label(
            exercise_frame,
            text="",
            font=FONTS['normal'],
            bg='white',
            fg=COLORS['gray']
        )
        self.exercise_instruction_label.pack(pady=5)
        
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        self.sentence_label = tk.Label(
            exercise_frame,
            text="",
            font=('Arial', 18),
            bg='white',
            fg='#34495e',
            wraplength=500
        )
        self.sentence_label.pack(pady=20, padx=20)
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞
        self.hint_label = tk.Label(
            exercise_frame,
            text="",
            font=('Arial', 11, 'italic'),
            bg='white',
            fg=COLORS['gray']
        )
        self.hint_label.pack(pady=5)
        
        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞
        answer_frame = tk.Frame(right_panel, bg=COLORS['light'])
        answer_frame.pack(pady=10)
        
        tk.Label(
            answer_frame,
            text="–í–∞—à –æ—Ç–≤–µ—Ç:",
            font=FONTS['normal'],
            bg=COLORS['light']
        ).pack(side='left', padx=10)
        
        self.answer_entry = tk.Entry(
            answer_frame,
            font=('Arial', 14),
            width=20
        )
        self.answer_entry.pack(side='left', padx=10)
        self.answer_entry.bind('<Return>', lambda e: self.check_grammar_answer())
        
        tk.Button(
            answer_frame,
            text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å",
            command=self.check_grammar_answer,
            font=FONTS['normal'],
            bg=COLORS['primary'],
            fg='white',
            padx=20,
            pady=5
        ).pack(side='left', padx=10)
        
        tk.Button(
            answer_frame,
            text="üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞",
            command=self.show_hint,
            font=FONTS['small'],
            bg=COLORS['warning'],
            fg='white',
            padx=15,
            pady=5
        ).pack(side='left', padx=5)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        self.result_label = tk.Label(
            right_panel,
            text="",
            font=('Arial', 14),
            bg=COLORS['light']
        )
        self.result_label.pack(pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        self.next_exercise_btn = tk.Button(
            right_panel,
            text="–°–ª–µ–¥—É—é—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ ‚ñ∂",
            command=self.next_exercise,
            font=FONTS['normal'],
            bg=COLORS['primary'],
            fg='white',
            padx=20,
            pady=10,
            state='disabled'
        )
        self.next_exercise_btn.pack(pady=10)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å—á–µ—Ç
        progress_frame = tk.Frame(right_panel, bg=COLORS['light'])
        progress_frame.pack(pady=10)
        
        self.exercise_progress_label = tk.Label(
            progress_frame,
            text="",
            font=FONTS['small'],
            bg=COLORS['light'],
            fg=COLORS['gray']
        )
        self.exercise_progress_label.pack(side='left', padx=10)
        
        self.score_label = tk.Label(
            progress_frame,
            text="–°—á–µ—Ç: 0/0",
            font=FONTS['normal'],
            bg=COLORS['light'],
            fg=COLORS['dark']
        )
        self.score_label.pack(side='left', padx=10)
    
    def update_selected_topics(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–º–∞—Ö"""
        selected = [topic for topic, var in self.topic_vars.items() if var.get()]
        total_exercises = sum(len(self.app.exercises_data[topic]) for topic in selected)
        
        self.selected_info_label.config(
            text=f"–í—ã–±—Ä–∞–Ω–æ —Ç–µ–º: {len(selected)}\n–í—Å–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {total_exercises}"
        )
        
        if total_exercises > 0:
            max_exercises = min(total_exercises, EXERCISE_MAX_COUNT)
            self.exercise_count_scale.config(to=max_exercises)
            if self.exercise_count_var.get() > max_exercises:
                self.exercise_count_var.set(max_exercises)
    
    def select_all_topics(self):
        """–í—ã–±—Ä–∞—Ç—å –≤—Å–µ —Ç–µ–º—ã"""
        for var in self.topic_vars.values():
            var.set(True)
        self.update_selected_topics()
    
    def deselect_all_topics(self):
        """–°–Ω—è—Ç—å –≤—ã–±–æ—Ä —Å–æ –≤—Å–µ—Ö —Ç–µ–º"""
        for var in self.topic_vars.values():
            var.set(False)
        self.update_selected_topics()
    
    def start_mixed_exercises(self):
        """–ù–∞—á–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–µ–º–∞–º"""
        self.selected_topics = [topic for topic, var in self.topic_vars.items() if var.get()]
        
        if not self.selected_topics:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç–µ–º—É!")
            return
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–º
        all_exercises = []
        for topic in self.selected_topics:
            all_exercises.extend(self.app.exercises_data[topic])
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏ –≤—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        random.shuffle(all_exercises)
        exercise_count = min(self.exercise_count_var.get(), len(all_exercises))
        self.mixed_exercises = all_exercises[:exercise_count]
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∏ —Ñ–ª–∞–≥–∏
        self.current_exercise_index = 0
        self.exercise_results = []
        self.answer_checked = False
        
        self.rule_title_label.config(text="üìö –°–º–µ—à–∞–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")
        self.exercise_instruction_label.config(text="–ü–æ—Å—Ç–∞–≤—å—Ç–µ –≥–ª–∞–≥–æ–ª –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É:")
        
        self.show_mixed_exercise()
    
    def show_mixed_exercise(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–∑ —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
        if self.current_exercise_index >= len(self.mixed_exercises):
            self.show_mixed_results()
            return
        
        self.answer_checked = False
        self.current_exercise = self.mixed_exercises[self.current_exercise_index]
        
        self.current_topic_label.config(text=f"üìå –¢–µ–º–∞: {self.current_exercise['rule']}")
        self.sentence_label.config(text=self.current_exercise['sentence'])
        
        self.answer_entry.delete(0, tk.END)
        self.answer_entry.config(state='normal')
        self.result_label.config(text="")
        self.hint_label.config(text="")
        self.next_exercise_btn.config(state='disabled')
        
        self.exercise_progress_label.config(
            text=f"–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ {self.current_exercise_index + 1} –∏–∑ {len(self.mixed_exercises)}"
        )
        
        self.answer_entry.focus()
    
    def show_hint(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É"""
        if self.current_exercise and self.current_exercise['hint']:
            self.hint_label.config(text=f"üí° {self.current_exercise['hint']}")
    
    def check_grammar_answer(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–∏"""
        if not self.current_exercise or self.answer_checked:
            return
        
        user_answer = self.answer_entry.get().strip()
        if not user_answer:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç!")
            return
        
        self.answer_checked = True
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        from utils.helpers import check_answer_match, format_correct_answer
        
        is_correct = check_answer_match(user_answer, self.current_exercise['answer'])
        
        self.app.total_attempts += 1
        
        self.exercise_results.append({
            'exercise': self.current_exercise,
            'user_answer': user_answer,
            'is_correct': is_correct
        })
        
        if is_correct:
            self.app.score += 1
            formatted_answer = format_correct_answer(self.current_exercise['answer'])
            self.result_label.config(
                text=f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! {formatted_answer}",
                fg=COLORS['success']
            )
        else:
            formatted_answer = format_correct_answer(self.current_exercise['answer'])
            self.result_label.config(
                text=f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {formatted_answer}",
                fg=COLORS['danger']
            )
        
        self.score_label.config(text=f"–°—á–µ—Ç: {self.app.score}/{self.app.total_attempts}")
        self.next_exercise_btn.config(state='normal')
        self.answer_entry.config(state='disabled')
        
        self.app.update_stats()
        self.app.save_progress()
    
    def next_exercise(self):
        """–°–ª–µ–¥—É—é—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ"""
        self.answer_checked = False
        self.answer_entry.config(state='normal')
        self.current_exercise_index += 1
        self.show_mixed_exercise()
    
    def show_mixed_results(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–º–µ—à–∞–Ω–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"""
        if not self.mixed_exercises:
            return
        
        results_window = tk.Toplevel(self.parent)
        results_window.title("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π")
        results_window.geometry("700x600")
        results_window.configure(bg=COLORS['light'])
        
        tk.Label(
            results_window,
            text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π",
            font=('Arial', 18, 'bold'),
            bg=COLORS['light'],
            fg=COLORS['dark']
        ).pack(pady=15)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        correct_count = sum(1 for r in self.exercise_results if r['is_correct'])
        total_count = len(self.exercise_results)
        percentage = (correct_count / total_count * 100) if total_count > 0 else 0
        
        stats_frame = tk.Frame(results_window, bg='white', relief='raised', bd=1)
        stats_frame.pack(pady=10, padx=20, fill='x')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ü–µ–Ω–∫—É
        if percentage >= 90:
            grade, grade_color = "–û—Ç–ª–∏—á–Ω–æ! üéâ", COLORS['success']
        elif percentage >= 75:
            grade, grade_color = "–•–æ—Ä–æ—à–æ! üëç", COLORS['primary']
        elif percentage >= 60:
            grade, grade_color = "–ù–µ–ø–ª–æ—Ö–æ üìö", COLORS['warning']
        else:
            grade, grade_color = "–ù—É–∂–Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞ üí™", COLORS['danger']
        
        tk.Label(stats_frame, text=grade, font=FONTS['title'], bg='white', fg=grade_color).pack(pady=10)
        tk.Label(stats_frame, text=f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_count} –∏–∑ {total_count}", 
                font=('Arial', 14), bg='white').pack(pady=5)
        tk.Label(stats_frame, text=f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {percentage:.1f}%", 
                font=('Arial', 14, 'bold'), bg='white').pack(pady=5)
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        details_frame = tk.Frame(results_window, bg='white', relief='raised', bd=1)
        details_frame.pack(pady=5, padx=20, fill='both', expand=True)
        
        text_widget = scrolledtext.ScrolledText(details_frame, font=FONTS['tiny'], 
                                                wrap=tk.WORD, height=10, bg='white')
        text_widget.pack(fill='both', expand=True, padx=10, pady=10)
        
        for i, result in enumerate(self.exercise_results, 1):
            exercise = result['exercise']
            symbol = "‚úì" if result['is_correct'] else "‚úó"
            
            text_widget.insert(tk.END, f"{i}. [{exercise['rule']}]\n")
            text_widget.insert(tk.END, f"   {exercise['sentence']}\n")
            text_widget.insert(tk.END, f"   –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {exercise['answer']}\n")
            if not result['is_correct']:
                text_widget.insert(tk.END, f"   –í–∞—à –æ—Ç–≤–µ—Ç: {result['user_answer']}\n")
            text_widget.insert(tk.END, f"   {symbol}\n\n")
        
        text_widget.config(state='disabled')
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = tk.Frame(results_window, bg=COLORS['light'])
        button_frame.pack(pady=15)
        
        tk.Button(button_frame, text="–ù–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", 
                 command=lambda: [results_window.destroy(), self.reset_exercises()],
                 font=FONTS['normal'], bg=COLORS['primary'], fg='white', 
                 padx=20, pady=8).pack(side='left', padx=10)
        
        tk.Button(button_frame, text="–ó–∞–∫—Ä—ã—Ç—å", command=results_window.destroy,
                 font=FONTS['normal'], bg=COLORS['gray'], fg='white', 
                 padx=20, pady=8).pack(side='left', padx=10)
    
    def reset_exercises(self):
        """–°–±—Ä–æ—Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        self.current_exercise_index = 0
        self.current_exercise = None
        self.mixed_exercises = []
        self.exercise_results = []
        self.answer_checked = False
        
        self.sentence_label.config(text="")
        self.exercise_progress_label.config(text="")
        self.result_label.config(text="")
        self.hint_label.config(text="")
        self.current_topic_label.config(text="")
        self.rule_title_label.config(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—ã –∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è'")
        self.exercise_instruction_label.config(text="")
        self.answer_entry.config(state='normal')
        self.answer_entry.delete(0, tk.END)
