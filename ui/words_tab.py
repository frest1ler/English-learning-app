"""
–í–∫–ª–∞–¥–∫–∞ —Å–ª–æ–≤–∞—Ä—è —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º —Ç–µ—Å—Ç–æ–º
"""

import tkinter as tk
from tkinter import messagebox, scrolledtext
import random
from config import COLORS, FONTS, TEST_MIN_WORDS, TEST_MAX_WORDS, TEST_DEFAULT_WORDS
from data.loader import DataLoader
from utils.helpers import normalize_answer

class WordsTab:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ —Å–ª–æ–≤–∞—Ä—è"""
    
    def __init__(self, parent, app):
        self.parent = parent
        self.app = app
        self.current_word_index = 0
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞
        self.test_mode = False
        self.test_words = []
        self.test_current_index = 0
        self.test_score = 0
        self.test_answers = []
        self.test_type = "eng_to_rus"
        self.test_answer_checked = False
        self.current_correct_answer = ""
        self.current_question_type = ""
        
        self.create_ui()
    
    def create_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–∫–ª–∞–¥–∫–∏"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.container = tk.Frame(self.parent, bg=COLORS['light'])
        self.container.pack(fill='both', expand=True)
        
        # –§—Ä–µ–π–º –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
        self.create_mode_buttons()
        
        # –ü–∞–Ω–µ–ª—å –ø–æ–∏—Å–∫–∞
        self.create_search_panel()
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–∂–∏–º–∞ –∏–∑—É—á–µ–Ω–∏—è
        self.study_container = tk.Frame(self.container, bg=COLORS['light'])
        self.study_container.pack(fill='both', expand=True)
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å–ª–æ–≤–∞
        self.create_word_card()
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.create_control_buttons()
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤
        self.create_example_buttons()
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        self.word_progress_label = tk.Label(
            self.study_container,
            text="",
            font=FONTS['small'],
            bg=COLORS['light'],
            fg=COLORS['gray']
        )
        self.word_progress_label.pack()
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–∞ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç)
        self.test_container = tk.Frame(self.container, bg=COLORS['light'])
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ
        self.show_word()
    
    def create_mode_buttons(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞"""
        mode_frame = tk.Frame(self.container, bg=COLORS['light'])
        mode_frame.pack(pady=10)
        
        tk.Button(
            mode_frame,
            text="üìñ –†–µ–∂–∏–º –∏–∑—É—á–µ–Ω–∏—è",
            command=self.switch_to_study_mode,
            font=FONTS['normal'],
            bg=COLORS['primary'],
            fg='white',
            padx=15,
            pady=8
        ).pack(side='left', padx=5)
        
        tk.Button(
            mode_frame,
            text="üéØ –†–µ–∂–∏–º —Ç–µ—Å—Ç–∞",
            command=self.show_test_setup,
            font=FONTS['normal'],
            bg=COLORS['orange'],
            fg='white',
            padx=15,
            pady=8
        ).pack(side='left', padx=5)
        
        tk.Button(
            mode_frame,
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ",
            command=self.show_add_word_dialog,
            font=FONTS['normal'],
            bg=COLORS['success'],
            fg='white',
            padx=15,
            pady=8
        ).pack(side='left', padx=5)
    
    def create_search_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –ø–æ–∏—Å–∫–∞"""
        search_frame = tk.Frame(self.container, bg=COLORS['light'])
        search_frame.pack(pady=10)
        
        tk.Label(
            search_frame,
            text="üîç –ü–æ–∏—Å–∫:",
            font=FONTS['small'],
            bg=COLORS['light']
        ).pack(side='left', padx=5)
        
        self.search_entry = tk.Entry(search_frame, font=FONTS['small'], width=20)
        self.search_entry.pack(side='left', padx=5)
        
        tk.Button(
            search_frame,
            text="–ù–∞–π—Ç–∏",
            command=self.search_word,
            font=FONTS['tiny'],
            bg=COLORS['primary'],
            fg='white',
            padx=10,
            pady=5
        ).pack(side='left', padx=5)
    
    def create_word_card(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–ª–æ–≤–∞"""
        card_frame = tk.Frame(self.study_container, bg='white', relief='raised', bd=2)
        card_frame.pack(pady=20, padx=20, fill='both', expand=True)
        
        # –°–ª–æ–≤–æ
        self.word_label = tk.Label(
            card_frame,
            text="",
            font=FONTS['word'],
            bg='white',
            fg=COLORS['dark']
        )
        self.word_label.pack(pady=20)
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
        self.transcription_label = tk.Label(
            card_frame,
            text="",
            font=FONTS['transcription'],
            bg='white',
            fg=COLORS['gray']
        )
        self.transcription_label.pack(pady=10)
        
        # –ü–µ—Ä–µ–≤–æ–¥
        self.translation_label = tk.Label(
            card_frame,
            text="",
            font=FONTS['translation'],
            bg='white',
            fg=COLORS['success']
        )
        self.translation_label.pack(pady=20)
        
        # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self.example_label = tk.Label(
            card_frame,
            text="",
            font=FONTS['example'],
            bg='white',
            fg=COLORS['primary'],
            wraplength=600
        )
        self.example_label.pack(pady=10)
        
        # –ü–µ—Ä–µ–≤–æ–¥ –ø—Ä–∏–º–µ—Ä–∞
        self.example_translation_label = tk.Label(
            card_frame,
            text="",
            font=('Arial', 13),
            bg='white',
            fg=COLORS['gray'],
            wraplength=600
        )
        self.example_translation_label.pack(pady=5)
    
    def create_control_buttons(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        control_frame = tk.Frame(self.study_container, bg=COLORS['light'])
        control_frame.pack(pady=20)
        
        tk.Button(
            control_frame,
            text="‚óÄ –ü—Ä–µ–¥—ã–¥—É—â–µ–µ",
            command=self.prev_word,
            font=FONTS['normal'],
            bg=COLORS['primary'],
            fg='white',
            padx=20,
            pady=10
        ).pack(side='left', padx=10)
        
        tk.Button(
            control_frame,
            text="–ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥",
            command=self.show_translation,
            font=FONTS['normal'],
            bg=COLORS['danger'],
            fg='white',
            padx=20,
            pady=10
        ).pack(side='left', padx=10)
        
        tk.Button(
            control_frame,
            text="–°–ª–µ–¥—É—é—â–µ–µ ‚ñ∂",
            command=self.next_word,
            font=FONTS['normal'],
            bg=COLORS['primary'],
            fg='white',
            padx=20,
            pady=10
        ).pack(side='left', padx=10)
        
        tk.Button(
            control_frame,
            text="üîÄ –°–ª—É—á–∞–π–Ω–æ–µ",
            command=self.random_word,
            font=FONTS['normal'],
            bg=COLORS['purple'],
            fg='white',
            padx=20,
            pady=10
        ).pack(side='left', padx=10)
    
    def create_example_buttons(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤"""
        example_frame = tk.Frame(self.study_container, bg=COLORS['light'])
        example_frame.pack(pady=10)
        
        tk.Button(
            example_frame,
            text="üìù –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä",
            command=self.show_example,
            font=FONTS['small'],
            bg=COLORS['teal'],
            fg='white',
            padx=15,
            pady=8
        ).pack(side='left', padx=5)
        
        tk.Button(
            example_frame,
            text="üîÑ –ü–µ—Ä–µ–≤–æ–¥ –ø—Ä–∏–º–µ—Ä–∞",
            command=self.show_example_translation,
            font=FONTS['small'],
            bg=COLORS['info'],
            fg='white',
            padx=15,
            pady=8
        ).pack(side='left', padx=5)
    
    # ==================== –ú–ï–¢–û–î–´ –î–õ–Ø –†–ï–ñ–ò–ú–ê –ò–ó–£–ß–ï–ù–ò–Ø ====================
    
    def show_word(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞"""
        if self.app.words_data:
            word_data = self.app.words_data[self.current_word_index]
            self.word_label.config(text=word_data['word'])
            self.transcription_label.config(text=word_data['transcription'])
            self.translation_label.config(text="")
            self.example_label.config(text="")
            self.example_translation_label.config(text="")
            
            self.word_progress_label.config(
                text=f"–°–ª–æ–≤–æ {self.current_word_index + 1} –∏–∑ {len(self.app.words_data)}"
            )
    
    def show_translation(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞"""
        if self.app.words_data:
            word_data = self.app.words_data[self.current_word_index]
            self.translation_label.config(text=word_data['translation'])
    
    def show_example(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞"""
        if self.test_mode and self.test_words:
            word_data = self.test_words[self.test_current_index]
            label = self.test_example_label
        elif self.app.words_data:
            word_data = self.app.words_data[self.current_word_index]
            label = self.example_label
        else:
            return
        
        if word_data.get('example'):
            label.config(text=f"üí° {word_data['example']}")
        else:
            label.config(text="üí° –ü—Ä–∏–º–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    def show_example_translation(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–∏–º–µ—Ä–∞"""
        if self.test_mode and self.test_words:
            word_data = self.test_words[self.test_current_index]
            label = self.test_example_translation_label
        elif self.app.words_data:
            word_data = self.app.words_data[self.current_word_index]
            label = self.example_translation_label
        else:
            return
        
        if word_data.get('example_translation'):
            label.config(text=f"üìñ {word_data['example_translation']}")
        else:
            label.config(text="üìñ –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    def next_word(self):
        """–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ"""
        if self.app.words_data:
            self.current_word_index = (self.current_word_index + 1) % len(self.app.words_data)
            self.show_word()
    
    def prev_word(self):
        """–ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–ª–æ–≤–æ"""
        if self.app.words_data:
            self.current_word_index = (self.current_word_index - 1) % len(self.app.words_data)
            self.show_word()
    
    def random_word(self):
        """–°–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ"""
        if self.app.words_data:
            self.current_word_index = random.randint(0, len(self.app.words_data) - 1)
            self.show_word()
    
    def search_word(self):
        """–ü–æ–∏—Å–∫ —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ"""
        from utils.helpers import search_in_list
        
        search_term = self.search_entry.get().strip()
        if not search_term:
            return
        
        index = search_in_list(search_term, self.app.words_data, ['word', 'translation'])
        if index >= 0:
            self.current_word_index = index
            self.show_word()
            messagebox.showinfo("–ù–∞–π–¥–µ–Ω–æ", f"–°–ª–æ–≤–æ –Ω–∞–π–¥–µ–Ω–æ: {self.app.words_data[index]['word']}")
        else:
            messagebox.showinfo("–ù–µ –Ω–∞–π–¥–µ–Ω–æ", "–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä–µ")
    
    def show_add_word_dialog(self):
        """–î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞"""
        dialog = tk.Toplevel(self.parent)
        dialog.title("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ")
        dialog.geometry("500x450")
        dialog.configure(bg=COLORS['light'])
        
        tk.Label(
            dialog,
            text="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ",
            font=FONTS['subtitle'],
            bg=COLORS['light']
        ).pack(pady=15)
        
        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        entries = {}
        fields = [
            ('word', '–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ:'),
            ('translation', '–ü–µ—Ä–µ–≤–æ–¥:'),
            ('transcription', '–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:'),
            ('example', '–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):'),
            ('example_translation', '–ü–µ—Ä–µ–≤–æ–¥ –ø—Ä–∏–º–µ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):')
        ]
        
        for field_name, label_text in fields:
            tk.Label(dialog, text=label_text, bg=COLORS['light']).pack(pady=5)
            entry = tk.Entry(dialog, font=FONTS['normal'], width=40)
            entry.pack(pady=5)
            entries[field_name] = entry
        
        def add_word():
            word_data = {
                'word': entries['word'].get().strip(),
                'translation': entries['translation'].get().strip(),
                'transcription': entries['transcription'].get().strip() or '[...]',
                'example': entries['example'].get().strip(),
                'example_translation': entries['example_translation'].get().strip()
            }
            
            if not word_data['word'] or not word_data['translation']:
                messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è!")
                return
            
            self.app.words_data.append(word_data)
            
            if DataLoader.save_word(word_data):
                messagebox.showinfo("–£—Å–ø–µ—à–Ω–æ", "–°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
                dialog.destroy()
                self.show_word()
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ª–æ–≤–æ")
        
        tk.Button(
            dialog,
            text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å",
            command=add_word,
            font=FONTS['normal'],
            bg=COLORS['success'],
            fg='white',
            padx=20,
            pady=8
        ).pack(pady=15)
        
        tk.Button(
            dialog,
            text="–û—Ç–º–µ–Ω–∞",
            command=dialog.destroy,
            font=FONTS['small'],
            bg=COLORS['gray'],
            fg='white',
            padx=15,
            pady=5
        ).pack()
    
    # ==================== –ú–ï–¢–û–î–´ –î–õ–Ø –†–ï–ñ–ò–ú–ê –¢–ï–°–¢–ê ====================
    
    def show_test_setup(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∞"""
        setup_window = tk.Toplevel(self.parent)
        setup_window.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∞")
        setup_window.geometry("400x350")
        setup_window.configure(bg=COLORS['light'])
        
        tk.Label(
            setup_window,
            text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∞",
            font=FONTS['title'],
            bg=COLORS['light'],
            fg=COLORS['dark']
        ).pack(pady=15)
        
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç–µ—Å—Ç–∞
        tk.Label(
            setup_window,
            text="–¢–∏–ø —Ç–µ—Å—Ç–∞:",
            font=FONTS['normal'],
            bg=COLORS['light']
        ).pack(pady=5)
        
        test_type_var = tk.StringVar(value="eng_to_rus")
        
        tk.Radiobutton(
            setup_window,
            text="–ê–Ω–≥–ª–∏–π—Å–∫–∏–π ‚Üí –†—É—Å—Å–∫–∏–π",
            variable=test_type_var,
            value="eng_to_rus",
            font=FONTS['small'],
            bg=COLORS['light']
        ).pack(pady=5)
        
        tk.Radiobutton(
            setup_window,
            text="–†—É—Å—Å–∫–∏–π ‚Üí –ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
            variable=test_type_var,
            value="rus_to_eng",
            font=FONTS['small'],
            bg=COLORS['light']
        ).pack(pady=5)
        
        tk.Radiobutton(
            setup_window,
            text="–°–º–µ—à–∞–Ω–Ω—ã–π",
            variable=test_type_var,
            value="mixed",
            font=FONTS['small'],
            bg=COLORS['light']
        ).pack(pady=5)
        
        # –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤
        tk.Label(
            setup_window,
            text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤:",
            font=FONTS['normal'],
            bg=COLORS['light']
        ).pack(pady=10)
        
        words_count_var = tk.IntVar(value=TEST_DEFAULT_WORDS)
        words_scale = tk.Scale(
            setup_window,
            from_=TEST_MIN_WORDS,
            to=min(len(self.app.words_data), TEST_MAX_WORDS),
            orient='horizontal',
            variable=words_count_var,
            bg=COLORS['light'],
            length=200
        )
        words_scale.pack(pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞
        tk.Button(
            setup_window,
            text="üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç",
            command=lambda: self.start_test(test_type_var.get(), words_count_var.get(), setup_window),
            font=FONTS['normal'],
            bg=COLORS['success'],
            fg='white',
            padx=20,
            pady=10
        ).pack(pady=20)
        
        tk.Button(
            setup_window,
            text="–û—Ç–º–µ–Ω–∞",
            command=setup_window.destroy,
            font=FONTS['small'],
            bg=COLORS['gray'],
            fg='white',
            padx=15,
            pady=5
        ).pack()
    
    def start_test(self, test_type, words_count, setup_window):
        """–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç"""
        setup_window.destroy()
        
        self.test_mode = True
        self.test_type = test_type
        self.test_score = 0
        self.test_current_index = 0
        self.test_answers = []
        self.test_answer_checked = False
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
        self.test_words = random.sample(self.app.words_data, min(words_count, len(self.app.words_data)))
        
        # –°–∫—Ä—ã–≤–∞–µ–º —Ä–µ–∂–∏–º –∏–∑—É—á–µ–Ω–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∞
        self.study_container.pack_forget()
        self.create_test_interface()
        self.show_test_question()
    
    def switch_to_study_mode(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –≤ —Ä–µ–∂–∏–º –∏–∑—É—á–µ–Ω–∏—è"""
        self.test_mode = False
        if self.test_container:
            self.test_container.pack_forget()
        self.study_container.pack(fill='both', expand=True)
        self.show_word()
    
    def create_test_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ç–µ—Å—Ç–∞"""
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç–µ—Å—Ç–∞
        for widget in self.test_container.winfo_children():
            widget.destroy()
        
        self.test_container.pack(fill='both', expand=True)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ—Å—Ç–∞
        self.test_progress_label = tk.Label(
            self.test_container,
            text="",
            font=FONTS['normal'],
            bg=COLORS['light'],
            fg=COLORS['dark']
        )
        self.test_progress_label.pack(pady=10)
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
        question_frame = tk.Frame(self.test_container, bg='white', relief='raised', bd=2)
        question_frame.pack(pady=20, padx=20, fill='both', expand=True)
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        self.test_instruction_label = tk.Label(
            question_frame,
            text="",
            font=FONTS['normal'],
            bg='white',
            fg=COLORS['gray']
        )
        self.test_instruction_label.pack(pady=10)
        
        # –í–æ–ø—Ä–æ—Å
        self.test_question_label = tk.Label(
            question_frame,
            text="",
            font=FONTS['translation'],
            bg='white',
            fg=COLORS['dark'],
            wraplength=600
        )
        self.test_question_label.pack(pady=30)
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞ (—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è)
        self.test_hint_label = tk.Label(
            question_frame,
            text="",
            font=('Arial', 14),
            bg='white',
            fg=COLORS['gray']
        )
        self.test_hint_label.pack(pady=10)
        
        # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∞
        self.test_example_label = tk.Label(
            question_frame,
            text="",
            font=('Arial', 13, 'italic'),
            bg='white',
            fg=COLORS['primary'],
            wraplength=600
        )
        self.test_example_label.pack(pady=5)
        
        # –ü–µ—Ä–µ–≤–æ–¥ –ø—Ä–∏–º–µ—Ä–∞ –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∞
        self.test_example_translation_label = tk.Label(
            question_frame,
            text="",
            font=FONTS['normal'],
            bg='white',
            fg=COLORS['gray'],
            wraplength=600
        )
        self.test_example_translation_label.pack(pady=5)
        
        # –§—Ä–µ–π–º –¥–ª—è –≤–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞
        answer_input_frame = tk.Frame(question_frame, bg='white')
        answer_input_frame.pack(pady=20)
        
        tk.Label(
            answer_input_frame,
            text="–í–∞—à –æ—Ç–≤–µ—Ç:",
            font=FONTS['subtitle'],
            bg='white',
            fg=COLORS['dark']
        ).pack(pady=5)
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞
        self.test_answer_entry = tk.Entry(
            answer_input_frame,
            font=FONTS['input'],
            width=30,
            justify='center'
        )
        self.test_answer_entry.pack(pady=10)
        self.test_answer_entry.bind('<Return>', lambda e: self.check_test_answer_input())
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.test_result_label = tk.Label(
            question_frame,
            text="",
            font=('Arial', 14, 'bold'),
            bg='white'
        )
        self.test_result_label.pack(pady=10)
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        self.test_correct_answer_label = tk.Label(
            question_frame,
            text="",
            font=('Arial', 13),
            bg='white',
            fg=COLORS['success']
        )
        self.test_correct_answer_label.pack(pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = tk.Frame(self.test_container, bg=COLORS['light'])
        buttons_frame.pack(pady=15)
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.test_check_button = tk.Button(
            buttons_frame,
            text="‚úì –ü—Ä–æ–≤–µ—Ä–∏—Ç—å",
            command=self.check_test_answer_input,
            font=FONTS['normal'],
            bg=COLORS['primary'],
            fg='white',
            padx=20,
            pady=10
        )
        self.test_check_button.pack(side='left', padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        self.test_next_button = tk.Button(
            buttons_frame,
            text="–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å ‚Üí",
            command=self.next_test_question,
            font=FONTS['normal'],
            bg=COLORS['success'],
            fg='white',
            padx=20,
            pady=10,
            state='disabled'
        )
        self.test_next_button.pack(side='left', padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞
        self.test_skip_button = tk.Button(
            buttons_frame,
            text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚Üí",
            command=self.skip_question,
            font=FONTS['small'],
            bg=COLORS['gray'],
            fg='white',
            padx=15,
            pady=8
        )
        self.test_skip_button.pack(side='left', padx=5)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∞
        example_buttons_frame = tk.Frame(self.test_container, bg=COLORS['light'])
        example_buttons_frame.pack(pady=10)
        
        tk.Button(
            example_buttons_frame,
            text="üìù –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä",
            command=self.show_example,
            font=FONTS['small'],
            bg=COLORS['teal'],
            fg='white',
            padx=15,
            pady=8
        ).pack(side='left', padx=5)
        
        tk.Button(
            example_buttons_frame,
            text="üîÑ –ü–µ—Ä–µ–≤–æ–¥ –ø—Ä–∏–º–µ—Ä–∞",
            command=self.show_example_translation,
            font=FONTS['small'],
            bg=COLORS['info'],
            fg='white',
            padx=15,
            pady=8
        ).pack(side='left', padx=5)
        
        # –°—á–µ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        self.test_score_label = tk.Label(
            self.test_container,
            text="–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: 0",
            font=FONTS['normal'],
            bg=COLORS['light'],
            fg=COLORS['success']
        )
        self.test_score_label.pack(pady=5)
    
    def show_test_question(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞"""
        if self.test_current_index >= len(self.test_words):
            self.show_test_results()
            return
        
        self.test_answer_checked = False
        current_word = self.test_words[self.test_current_index]
        
        self.test_progress_label.config(
            text=f"–í–æ–ø—Ä–æ—Å {self.test_current_index + 1} –∏–∑ {len(self.test_words)}"
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞
        if self.test_type == "mixed":
            question_type = random.choice(["eng_to_rus", "rus_to_eng"])
        else:
            question_type = self.test_type
        
        self.current_question_type = question_type
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
        if question_type == "eng_to_rus":
            self.test_instruction_label.config(text="–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–∏–π:")
            self.test_question_label.config(text=current_word['word'])
            self.test_hint_label.config(text=current_word['transcription'])
            self.current_correct_answer = current_word['translation']
        else:
            self.test_instruction_label.config(text="–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π:")
            self.test_question_label.config(text=current_word['translation'])
            self.test_hint_label.config(text="")
            self.current_correct_answer = current_word['word']
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        # –°–Ω–∞—á–∞–ª–∞ –≤–∫–ª—é—á–∞–µ–º, –ø–æ—Ç–æ–º –æ—á–∏—â–∞–µ–º
        self.test_answer_entry.config(state='normal')
        self.test_answer_entry.delete(0, tk.END)
        self.test_answer_entry.config(bg='white')
        
        self.test_result_label.config(text="")
        self.test_correct_answer_label.config(text="")
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
        self.test_example_label.config(text="")
        self.test_example_translation_label.config(text="")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
        self.test_check_button.config(state='normal')
        self.test_next_button.config(state='disabled')
        self.test_skip_button.config(state='normal')
        
        # –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        self.test_answer_entry.focus()
        
        self.test_score_label.config(
            text=f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {self.test_score}/{self.test_current_index}"
        )
    
    def check_test_answer_input(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ—Å—Ç–µ"""
        if self.test_answer_checked:
            return
        
        user_answer = self.test_answer_entry.get().strip()
        
        if not user_answer:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç!")
            return
        
        self.test_answer_checked = True
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        from utils.helpers import check_answer_match, format_correct_answer
        
        is_correct = check_answer_match(user_answer, self.current_correct_answer)
        
        self.test_answers.append({
            'word': self.test_words[self.test_current_index],
            'user_answer': user_answer,
            'correct_answer': self.current_correct_answer,
            'is_correct': is_correct,
            'question_type': self.current_question_type
        })
        
        if is_correct:
            self.test_score += 1
            self.test_result_label.config(text="‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!", fg=COLORS['success'])
            self.test_answer_entry.config(bg='#d4edda')
        else:
            self.test_result_label.config(text="‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ", fg=COLORS['danger'])
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            formatted_answer = format_correct_answer(self.current_correct_answer)
            self.test_correct_answer_label.config(
                text=f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {formatted_answer}"
            )
            self.test_answer_entry.config(bg='#f8d7da')
        
        self.test_score_label.config(
            text=f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {self.test_score}/{self.test_current_index + 1}"
        )
        
        self.test_answer_entry.config(state='disabled')
        self.test_check_button.config(state='disabled')
        self.test_skip_button.config(state='disabled')
        
        self.test_next_button.config(state='normal')
        self.test_next_button.focus()
    
    def skip_question(self):
        """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å"""
        if self.test_answer_checked:
            return
        
        self.test_answer_checked = True
        
        self.test_answers.append({
            'word': self.test_words[self.test_current_index],
            'user_answer': '',
            'correct_answer': self.current_correct_answer,
            'is_correct': False,
            'question_type': self.current_question_type
        })
        
        self.test_result_label.config(text="‚è≠Ô∏è –í–æ–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω", fg=COLORS['warning'])
        self.test_correct_answer_label.config(
            text=f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {self.current_correct_answer}"
        )
        
        self.parent.after(2000, self.next_test_question)
    
    def next_test_question(self):
        """–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞"""
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        self.test_answer_checked = False
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–Ω–∞—á–∞–ª–∞ –≤–∫–ª—é—á–∞–µ–º –ø–æ–ª–µ, –ø–æ—Ç–æ–º –æ—á–∏—â–∞–µ–º
        self.test_answer_entry.config(state='normal')  # –í–∫–ª—é—á–∞–µ–º –ø–æ–ª–µ
        self.test_answer_entry.delete(0, tk.END)       # –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        self.test_answer_entry.config(bg='white')      # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ü–≤–µ—Ç
        
        self.test_current_index += 1
        self.show_test_question()
    
    def show_test_results(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞"""
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        for widget in self.test_container.winfo_children():
            widget.destroy()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        tk.Label(
            self.test_container,
            text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞",
            font=('Arial', 20, 'bold'),
            bg=COLORS['light'],
            fg=COLORS['dark']
        ).pack(pady=20)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        percentage = (self.test_score / len(self.test_words)) * 100 if len(self.test_words) > 0 else 0
        
        result_frame = tk.Frame(self.test_container, bg='white', relief='raised', bd=2)
        result_frame.pack(pady=10, padx=20, fill='x')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∏ —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if percentage >= 90:
            color, emoji, message = COLORS['success'], 'üéâ', '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ!'
        elif percentage >= 80:
            color, emoji, message = '#2ecc71', 'üåü', '–û—Ç–ª–∏—á–Ω–æ!'
        elif percentage >= 70:
            color, emoji, message = COLORS['primary'], 'üëç', '–•–æ—Ä–æ—à–æ!'
        elif percentage >= 60:
            color, emoji, message = COLORS['warning'], 'üìö', '–ù–µ–ø–ª–æ—Ö–æ!'
        else:
            color, emoji, message = COLORS['danger'], 'üí™', '–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–∏!'
        
        tk.Label(
            result_frame,
            text=f"{emoji} {message}",
            font=('Arial', 18, 'bold'),
            bg='white',
            fg=color
        ).pack(pady=10)
        
        tk.Label(
            result_frame,
            text=f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {self.test_score} –∏–∑ {len(self.test_words)}",
            font=FONTS['title'],
            bg='white'
        ).pack(pady=5)
        
        tk.Label(
            result_frame,
            text=f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {percentage:.1f}%",
            font=FONTS['title'],
            bg='white',
            fg=color
        ).pack(pady=5)
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        tk.Label(
            self.test_container,
            text="üìù –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:",
            font=FONTS['subtitle'],
            bg=COLORS['light'],
            fg=COLORS['dark']
        ).pack(pady=10)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        details_frame = tk.Frame(self.test_container, bg='white', relief='raised', bd=1)
        details_frame.pack(pady=5, padx=20, fill='both', expand=True)
        
        text_widget = scrolledtext.ScrolledText(
            details_frame,
            font=FONTS['small'],
            wrap=tk.WORD,
            height=12,
            bg='white'
        )
        text_widget.pack(fill='both', expand=True, padx=10, pady=10)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        for i, result in enumerate(self.test_answers, 1):
            word_data = result['word']
            symbol = "‚úÖ" if result['is_correct'] else "‚ùå"
            
            if result['question_type'] == 'eng_to_rus':
                question = f"{word_data['word']} {word_data['transcription']}"
            else:
                question = word_data['translation']
            
            text_widget.insert(tk.END, f"{i}. {question}\n", "question")
            
            if result['is_correct']:
                text_widget.insert(tk.END, f"   {symbol} –í–∞—à –æ—Ç–≤–µ—Ç: {result['user_answer']}\n", "correct")
            else:
                if result['user_answer']:
                    text_widget.insert(tk.END, f"   {symbol} –í–∞—à –æ—Ç–≤–µ—Ç: {result['user_answer']}\n", "wrong")
                else:
                    text_widget.insert(tk.END, f"   {symbol} –í–æ–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω\n", "skipped")
                text_widget.insert(tk.END, f"   ‚úì –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {result['correct_answer']}\n", "correct_answer")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
            if word_data.get('example'):
                text_widget.insert(tk.END, f"   üí° –ü—Ä–∏–º–µ—Ä: {word_data['example']}\n", "example")
                if word_data.get('example_translation'):
                    text_widget.insert(tk.END, f"   üìñ –ü–µ—Ä–µ–≤–æ–¥: {word_data['example_translation']}\n", "example_trans")
            
            text_widget.insert(tk.END, "\n")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤ –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        text_widget.tag_config("question", foreground=COLORS['dark'], font=(FONTS['small'][0], FONTS['small'][1], 'bold'))
        text_widget.tag_config("correct", foreground=COLORS['success'])
        text_widget.tag_config("wrong", foreground=COLORS['danger'])
        text_widget.tag_config("skipped", foreground=COLORS['warning'])
        text_widget.tag_config("correct_answer", foreground=COLORS['success'], font=(FONTS['small'][0], FONTS['small'][1], 'italic'))
        text_widget.tag_config("example", foreground=COLORS['primary'], font=(FONTS['tiny'][0], FONTS['tiny'][1], 'italic'))
        text_widget.tag_config("example_trans", foreground=COLORS['gray'], font=FONTS['tiny'])
        
        text_widget.config(state='disabled')
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        button_frame = tk.Frame(self.test_container, bg=COLORS['light'])
        button_frame.pack(pady=15)
        
        tk.Button(
            button_frame,
            text="üîÑ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ",
            command=self.restart_test,
            font=FONTS['normal'],
            bg=COLORS['primary'],
            fg='white',
            padx=20,
            pady=10
        ).pack(side='left', padx=10)
        
        tk.Button(
            button_frame,
            text="üéØ –ù–æ–≤—ã–π —Ç–µ—Å—Ç",
            command=self.show_test_setup,
            font=FONTS['normal'],
            bg=COLORS['orange'],
            fg='white',
            padx=20,
            pady=10
        ).pack(side='left', padx=10)
        
        tk.Button(
            button_frame,
            text="üìñ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–∑—É—á–µ–Ω–∏—é",
            command=self.switch_to_study_mode,
            font=FONTS['normal'],
            bg=COLORS['purple'],
            fg='white',
            padx=20,
            pady=10
        ).pack(side='left', padx=10)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.app.total_attempts += len(self.test_words)
        self.app.score += self.test_score
        self.app.update_stats()
        self.app.save_progress()
    
    def restart_test(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ç –∂–µ —Ç–µ—Å—Ç"""
        self.test_current_index = 0
        self.test_score = 0
        self.test_answers = []
        self.test_answer_checked = False
        random.shuffle(self.test_words)
        self.create_test_interface()
        self.show_test_question()